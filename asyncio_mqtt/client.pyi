import asyncio
import logging
import ssl
from types import TracebackType
from typing import Any, Generator, List, Optional, Type, Union

from paho.mqtt import client as paho  # type: ignore

from .error import MqttCodeError as MqttCodeError
from .error import MqttConnectError as MqttConnectError
from .error import MqttError as MqttError

MQTT_LOGGER: logging.Logger

ProtocolType = Union[paho.MQTTv31, paho.MQTTv311, paho.MQTTv5]

class Client:
    def __init__(
        self,
        hostname: str,
        port: int = ...,
        *,
        username: Optional[str] = ...,
        password: Optional[str] = ...,
        logger: Optional[logging.Logger] = ...,
        client_id: Optional[str] = ...,
        tls_context: Optional[ssl.SSLContext] = ...,
        protocol: Optional[ProtocolType] = ...,
        will: Optional[Will] = ...,
        clean_session: Optional[bool] = ...,
        transport: str = ...
    ) -> None: ...
    @property
    def id(self) -> str: ...
    async def connect(self, *, timeout: int = ...) -> None: ...
    async def disconnect(self, *, timeout: int = ...) -> None: ...
    async def force_disconnect(self) -> None: ...
    async def subscribe(
        self, *args: Any, timeout: int = ..., **kwargs: Any
    ) -> List[int]: ...
    async def unsubscribe(self, *args: Any, timeout: int = ...) -> None: ...
    async def publish(self, *args: Any, timeout: int = ..., **kwargs: Any) -> None: ...
    async def filtered_messages(
        self, topic_filter: str, *, queue_maxsize: int = ...
    ) -> Generator[asyncio.Queue[paho.MQTTMessage], None, None]: ...
    async def unfiltered_messages(
        self, *, queue_maxsize: int = ...
    ) -> Generator[asyncio.Queue[paho.MQTTMessage], None, None]: ...
    async def __aenter__(self) -> Client: ...
    async def __aexit__(
        self, exc_type: Type[Exception], exc: Exception, tb: TracebackType
    ) -> None: ...

class Will:
    topic: str = ...
    payload: Optional[Union[str, bytes, bytearray, int, float]] = ...
    qos: int = ...
    retain: bool = ...
    properties: Optional[paho.Properties] = ...
    def __init__(
        self,
        topic: str,
        payload: Optional[Union[str, bytes, bytearray, int, float]] = ...,
        qos: int = ...,
        retain: bool = ...,
        properties: Optional[paho.Properties] = ...,
    ) -> None: ...
