[build-system]
requires = ["setuptools >= 65", "setuptools-scm >= 7"]
build-backend = "setuptools.build_meta"

[project]
name = "asyncio_mqtt"
description = "Idiomatic asyncio wrapper around paho-mqtt"
readme = "README.md"
authors = [{ name = "Frederik Aalund", email = "fpa@sbtinstruments.com" }]
maintainers = [
    { name = "Jonathan Plasse", email = "jonathan.plasse@live.fr" },
    { name = "Felix BÃ¶hm", email = "felix@felixboehm.dev" },
]
keywords = ["mqtt", "async", "asyncio", "paho-mqtt", "wrapper"]
license = { text = "BSD 3-Clause License" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = ">= 3.7"
dependencies = [
    "paho-mqtt>=1.6.0",
    "typing_extensions>=4.4.0; python_version<'3.10'",
]
dynamic = ["version"]

[project.urls]
"Source code" = "https://github.com/sbtinstruments/asyncio-mqtt"
"Issue tracker" = "https://github.com/sbtinstruments/asyncio-mqtt/issues"

[project.optional-dependencies]
lint = ["mypy>=1.3.0", "ruff==0.0.269", "types-paho-mqtt>=1.6.0.6"]
format = ["black>=23.3.0"]
tests = ["pytest>=7.2.0", "pytest-cov>=4.0.0", "anyio>=3.6.2"]
docs = [
    "sphinx>=5.3.0",
    "furo>=2022.9.29",
    "sphinx-autobuild>=2021.3.14",
    "myst-parser>=0.18.1",
    "sphinx-copybutton>=0.5.1",
]

[tool.setuptools] # https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
packages = ["asyncio_mqtt"]

[tool.setuptools_scm] # https://github.com/pypa/setuptools_scm/
write_to = "asyncio_mqtt/_version.py"

[tool.black] # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
target-version = ["py37", "py38", "py39", "py310", "py311"]

[tool.isort] # https://pycqa.github.io/isort/docs/configuration/options.html
color_output = true
profile = "black"

[tool.ruff]
required-version = "0.0.269"
target-version = "py37"
select = [
    "F",   # Pyflakes
    "E",   # pycodestyle
    "W",   # pycodestyle
    "C90", # mccabe
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todos
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "RUF", # Ruff-specific rules
]
ignore = [
    "ANN101", # missing-type-self
    "ANN102", # missing-type-cls
    "ANN401", # dynamically-typed-expression
    "BLE001", # blind-except
    "COM",    # trailing-comma
    "D10",    # missing-docstring
    "E501",   # line-too-long
    "SIM105", # use-contextlib-suppress
    "TD003",  # missing-todo-link
]
unfixable = [
    "ERA001", # commented-out-code
    "F401",   # unused-import
    "F841",   # unused-variable
    "T20",    # print-found
]
task-tags = ["SPDX-License-Identifier"]

[tool.ruff.flake8-pytest-style] # https://github.com/charliermarsh/ruff#flake8-pytest-style-pt
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "S101", # assert-used
]
"tests/test_client.py" = [
    "SLF001", # private-member-access
]

[tool.ruff.pydocstyle] # https://github.com/charliermarsh/ruff#pydocstyle
convention = "pep257"

[tool.mypy] # https://mypy.readthedocs.io/en/latest/config_file.html
python_version = "3.8"
strict = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
junit_xml = "reports/mypy.xml"
pretty = true
no_strict_concatenate = true   # TODO(jonathan): remove when dropping python 3.7

[tool.pytest.ini_options] # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --verbosity=2 --junitxml=reports/pytest.xml tests"
filterwarnings = [
    "error",
    "ignore:ssl.PROTOCOL_TLS is deprecated:DeprecationWarning",
]
xfail_strict = true

[tool.coverage.run] # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
data_file = "reports/.coverage"

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
fail_under = 85
precision = 1
show_missing = true
skip_covered = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain if tests do not hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.xml] # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"
