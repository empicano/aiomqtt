[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aiomqtt"
version = "2.4.0"
description = "The idiomatic asyncio MQTT client"
authors = [
    { name = "Frederik Aalund", email = "fpa@sbtinstruments.com" },
    { name = "Felix BÃ¶hm", email = "f@bo3hm.com" },
    { name = "Jonathan Plasse", email = "jonathan.plasse@live.fr" },
]
readme = "README.md"
keywords = [
    "mqtt",
    "iot",
    "internet-of-things",
    "asyncio",
    "paho-mqtt",
    "mqttv5",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.8,<4.0"
dependencies = [
    "paho-mqtt>=2.1.0,<3.0.0",
    "typing-extensions>=4.4.0,<5.0.0; python_version < \"3.10\"",
]

[project.urls]
"Source" = "https://github.com/empicano/aiomqtt"
"Documentation" = "https://aiomqtt.bo3hm.com"
"Issue tracker" = "https://github.com/empicano/aiomqtt/issues"

[dependency-groups]
dev = [
    "mypy>=1.10.0,<2.0.0",
    "pytest>=7.3.1,<8.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "anyio>=3.6.2,<4.0.0",
    "furo>=2023.3.27,<2024.0.0",
    "sphinx-autobuild>=2021.3.14,<2022.0.0",
    "myst-parser>=1.0.0,<2.0.0",
    "sphinx-copybutton>=0.5.2,<0.6.0",
    "sphinx>=5.3,<6.0",
    "ruff>=0.11.2",
]

[tool.ruff]
target-version = "py38"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D103",
    "C901",    # complex-structure
    "COM812",  # missing-trailing-comma
    "PLR0912", # too-many-branches
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
    "D100",    # undocumented-public-module
    "D101",    # undocumented-public-class
    "D104",    # undocumented-public-package
    "D105",    # undocumented-magic-method
    "D107",    # undocumented-public-init
    "FIX002",  # line-contains-todo
    "TD003",   # missing-todo-link
    "TC001",   # typing-only-first-party-import
    "TC002",   # typing-only-third-party-import
    "TC003",   # typing-only-standard-library-import
]
task-tags = ["SPDX-License-Identifier"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "S101",   # assert
    "SLF001", # private-member-access
]

[tool.mypy]
python_version = "3.8"
strict = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
pretty = true

[tool.pytest.ini_options]
markers = ["network: tests that requires network access"]
xfail_strict = true

[tool.coverage.run]
branch = true
data_file = "reports/.coverage"

[tool.coverage.report]
show_missing = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain if tests do not hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.xml]
output = "reports/coverage.xml"
